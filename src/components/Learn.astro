---
import type { Code } from "astro:components";
---

<article>
    <h1>What I woud like to learn more about</h1>
    <p>My passion have always been about Animation and Gaming, but what I doesn't have much experience in is Unity or Game Development. 
        But I wnat to learn more about animtion and unity.
    </p>

<section id="section">
    <div class="hidden">
        <img src="/png/unity-icon.png" alt="" style="border-radius: 25px;">
        <h2>Unity</h2>
        <p></p>
    </div>
    <div class="hidden">
        <img src="" alt="">
        <h2>Animation</h2>
        <p>tekst her</p>
    </div>
    <div class="hidden">
        <img src="" alt="">
        <h2>Gaming Development</h2>
        <p>tekst her</p>
    </div>
</section>
</article>



<style>
/* Text animation */

.hidden{
    opacity: 0;
    transition: ease 1.8s;
    transform: translate(0%);
    filter: blur(5px);
}

.hidden:nth-child(2){
  transition-delay: 400ms;
}

.hidden:nth-child(3){
  transition-delay: 800ms;
}
.show{
    opacity: 1;
    filter: blur(0);
    transform: translate(0);
}








article{
    color: white;
    text-align: center;
    padding: 20px;
    /* background: radial-gradient(circle at bottom left, #351c1c, #131313, #351c1c); */
    /* background-color: #0e0e0e; */
    filter: brightness(1);
}

#section{
    display: grid;
    gap: 2em;

& div{
        background-color: black;
        padding: 10px;
        position: relative;
        border-radius: 15px;
        width: 50%;
        margin: auto;
        border-style: solid;
    }
    
    /* & div::after,
    div::before{
        content: '';
        position: absolute;
        inset: -.1rem;
        z-index: -1;
        background: conic-gradient(
            from var(--gradient-angle),
            black,
            white, 
            black);
            border-radius: inherit;
            animation: rotation 20s linear infinite;
            border-radius: 15px;
    }
    
    div::after{
        filter: blur(0rem);
    }

    @property --gradient-angle{
    syntax: "<angle>";
    initial-value: 0deg;
    inherits: false;
    }

    @keyframes rotation{
    0% {--gradient-angle: 0deg;}
    100% {--gradient-angle: 360deg;}
    }  */

    img{
        width: 30%;
    }

    h1{
        font-size: 30px;
    }

    h2{
        font-size: 25px;
    }

    p{
        font-size: 14px;
    }

}

@media screen and (min-width: 599px){
    #section{
        display: flex;
        padding: 20px;
    }
    & div{
        padding: 16px;
        position: relative;
        border-radius: 15px;
        width: block;
        margin: block;
    }
}


@media screen and (min-width: 999px){

    article{
        color: white;
        text-align: center;
        padding: 1em 35em;
    }

    p{
        font-size: medium;
    }

#section{
    display: flex;
    justify-content: center;
    gap: 3em;
    margin-top: 2em;
    margin-bottom: 2em;
    
    img{
        width: 50%;
    }


    div{
        height: 20vh;
    }
}

}
</style>





<script>
    const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
            console.log(entry)
            if(entry.isIntersecting) {
                entry.target.classList.add('show');
            } else {
                entry.target.classList.remove('show');
            }
        });
    });
    
    const hiddenElements = document.querySelectorAll("hidden");
    hiddenElements.forEach((el) => observer.observe(el));
  </script>